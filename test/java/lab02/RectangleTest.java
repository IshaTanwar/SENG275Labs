/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test
    void testHarnessWorking() {
        assertTrue(true);
    }

    // Requirement 1: Defaults
    @Test
    void defaultRectangleX() {
        Rectangle r = new Rectangle();
        assertEquals(0, r.getX());
        assertEquals(0, r.getY());
        assertEquals(1, r.getWidth());
        assertEquals(1, r.getHeight());
    }

    //Requirement 2: Customs
    @Test
    void customRectangle() {
        Rectangle r = new Rectangle(5,5,6,7);
        assertEquals(5,r.getX());
        assertEquals(5,r.getY());
        assertEquals(6,r.getWidth());
        assertEquals(7,r.getHeight());
    }

    //Requirement 3: Setter for width
    @Test
    void setWidthValid() {
        Rectangle r = new Rectangle(5,5,6,7);
        r.setWidth(20);
        assertEquals(20,r.getWidth());
    }
    // Requirement 4: Width Setter behaviour with negative width
    @Test
    void setWidthNegative() {
        Rectangle r = new Rectangle(9,5,8,9);
        assertThrows(IllegalArgumentException.class,
                () -> r.setWidth(-8));
    }
    // Requirement 5: Setter for Height
    @Test
    void setHeightValid() {
        Rectangle r = new Rectangle(5,5,6,7);
        r.setHeight(20);
        assertEquals(20,r.getHeight());
    }
    // Requirement 6: Height Setter behaviour with negative height
    @Test
    void setHeightNegative() {
        Rectangle r = new Rectangle(9,5,8,9);
        assertThrows(IllegalArgumentException.class,
                () -> r.setHeight(-8));
    }
    // Requirement 7: Setting x
    @Test
    void setXTest() {
        Rectangle r = new Rectangle(5,5,6,7);
        r.setX(3);
        assertEquals(3,r.getX());
    }
    // Requirement 8: Setting y
    @Test
    void setYTest() {
        Rectangle r = new Rectangle(5,5,6,7);
        r.setY(3);
        assertEquals(3,r.getY());
    }
    // Requirement 9: Equal Rectangles
    @Test
    void EqualityTest() {
        Rectangle r1 = new Rectangle(1,2,3,4);
        Rectangle r2 = new Rectangle(1,2,3,4);
        Rectangle r3 = new Rectangle(5,8,0,5);
        assertTrue(r1.equal(r2));
        assertFalse(r3.equal(r2));
    }
    //Requirement 10: Area of Rectangle
    @Test
    void AreaTest() {
        Rectangle r = new Rectangle(5,5,6,7);
        assertEquals(42,r.area());
    }
    //Requirement 11: Rectangle inside another rectangle
    @Test
    void InsideRectTest() {
        Rectangle r1 = new Rectangle(0,2,3,4);
        Rectangle r2 = new Rectangle(1,1,1,2);
        assertTrue(r1.contains(r2));
    }
}
